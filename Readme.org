http://zk-phi.github.io/MEGAMOJI

** 開発者向け

新しいアイデアや新しいクソアニメを実装したらぜひ PR ください！

*** 開発環境
**** dev server

: npm install
: npm run start

するとブラウザが開きます。

ソースをいじるとすぐに反映されます。

**** ビルド

: npm run build

ビルドすると =dist= 以下に成果物が入ります。

静的サイトとしてデプロイできます。

**** lint

: npm run lint

コーディングスタイルの揺れなどを自動検出します。

PR を送ると自動で走りますが、手元で事前に実行しておきたい場合に使ってください。

*** ディレクトリ構成

- ~dist/~ ... ビルドされたアプリが入る場所です
  - ~ga.js~ ... google analytics を読み込むやつです
  - ~assets/~ ... 「パーツから選ぶ」で使用するパーツ画像が入っています
  - ~fonts/~ ... web font が入っています。読込みは  ~css/fonts.css~ でやっています
  - ~css/~
    - ~fonts.css~ ... webfont の読み込みをしています
    - ~style.css~ ... 独自のスタイルが入っています
- ~src/~
  - ~animations.ts~ ... アニメーションの一覧が入っています
  - ~animations/~ ... 個別のアニメーションの実装が入っています
  - ~effects.ts~ ... エフェクトの一覧が入っています
  - ~effects/~ ... エフェクトの実装が入っています
  - ~filters.ts~ ... フィルタの一覧が入っています
  - ~filters/~ ... フィルタの実装が入っています
  - ~posteffects.ts~ ... ポストエフェクトの一覧が入っています
  - ~posteffects/~ ... ポストエフェクトの実装が入っています
  - ~webgleffects.ts~ ... WebGL エフェクトの一覧が入っています
  - ~webgleffects/~ ... WebGL エフェクトの実装が入っています
  - ~megamoji.ts~ ... 本体です、 Vue のコントローラーが入っています
  - ~parts.js~ ... 「パーツから選ぶ」のパーツ一覧が入っています

*** フィルタの追加

「ファイルから選ぶ」で画像を読み込む際、画像に対して行う前処理の実装です。

~src/filters.js~ に一覧があります。

フィルタの実体は１引数の関数です。

~HTMLImageElement~ が渡ってくるので、適宜画像処理をして、できあがった画像を
BlobURL で返します。

*** エフェクトの追加

「効果をつける」タブで選ぶことのできる特殊効果たちの実装です。ユーザーは
複数のエフェクトを組み合わせて使用することができます。

~src/effects.js~ に一覧があります。

エフェクトの実体は５引数の関数です：

- ~keyframe~ :: アニメーションの進行具合 (0.0 ~ 1.0 の浮動小数)
- ~ctx~ :: CanvasRenderingContext2D のオブジェクト
- ~cellWidth~ :: canvas の横幅
- ~cellHeight~ :: canvas の高さ

背景が塗りつぶされたあと、 ~drawImage~ される直前の ~ctx~ が渡ってくる
ので、 ~transform~, ~filter~, ~clip~ など好みの変形をセットしてくださ
い。 エフェクトは複数併用することを想定しているので、 ~setTransform~
など他のエフェクトが加えた効果をアンドゥしてしまうようなメソッドを呼ぶ
ことは避けてください。

渡ってくる ~canvas~ は、最終的に絵文字としてレンダーされるものの４倍
（縦横それぞれ２倍）の大きさになっていることに注意してください。

#+begin_src text
  +--------+
  |        | <- cellHeight / 4 の余白
  | +----+ |
  | |    | | <- cellHeight / 2
  | |    | |    最終的に絵文字に使われる部分
  | +----+ |
  |        | <- cellHeight / 4 の余白
  +--------+
#+end_src

たとえば絵文字を上にスライドアウトさせたい場合、 ~cellHeight / 2~ だけ
(~cellHeight~ ではなく) 上に ~translate~ してあげれば十分です

余白をトリミングする前の canvas の様子が見たい場合は、「整形方法を選ぶ」
の「その他」にある「余白を切らない」を有効にしてください。

===

仕様の背景：

~びよんびよん~ などの拡大縮小 (特に縮小) や回転を伴うエフェクトを組み
合わせると、本来絵文字として使われる範囲外の、余白部分までチラ見えして
しまうことがあります。このような場合でもアニメーションを綺麗に見せるた
め、内部ではいったん、最終的に絵文字に使われる範囲より外まではみ出して
レンダリングしてから、あとで余白をカットしています。

わかりづらい仕様なのでなんとかしたい気持ちはありますが、上手い方法が思
いついていないです。

*** アニメーションの追加

「効果をつける」タブ内「アニメーション」で選ぶことができる特殊効果たち
の実装です。ユーザーは一つしか同時に使えません。

~src/animations.js~ に一覧があります。

アニメーションの実体は５引数の関数です：

- ~keyframe~ :: (~effect_~ と同様)
- ~ctx~ :: (~effect_~ と同様)
- ~image~ :: アニメーションさせたい元画像
- ~offsetH~ :: 元画像の描画したい範囲（左端）
- ~offsetV~ :: 元画像の描画したい範囲（上端）
- ~width~ :: 元画像の描画したい範囲 (幅)
- ~height~ :: 元画像の描画したい範囲 (高さ)
- ~cellWidth~ :: (~effect_~ と同様)
- ~cellHeight~ :: (~effect_~ と同様)

エフェクトに比べて、元画像に関する引数が増えています。

アニメーションは、渡ってきた canvas に対して、 ~ctx.drawImage~ などを
使って実際に画像 ~image~ をレンダリングすることが期待されます。ユーザー
の設定したトリミング範囲が ~offsetH, offsetV, width, height~ として渡っ
てくるので、通常、 canvas に対するレンダリングは以下の形になります (効
果の一環としてあえてそうしないことは可能です)：

#+begin_src javascript
  ctx.drawImage(image, offsetH, offsetV, width, height, ...);
#+end_src

アニメーションに渡される canvas もエフェクトと同様、実際に絵文字として
出力されるものの４倍の大きさを持っています。

#+begin_src text
  +--------+
  |        | <- cellHeight / 4 の余白
  | +----+ |
  | |    | | <- cellHeight / 2
  | |    | |    最終的に絵文字に使われる部分
  | +----+ |
  |        | <- cellHeight / 4 の余白
  +--------+
#+end_src

たとえば、ただ画面の中央に通常のサイズで絵文字を描画したいだけの場合
(なにもしないアニメーション)、実装は次のようになります：

#+begin_src javascript
  ctx.drawImage(..., cellWidth / 4, cellHeight / 4, cellWidth / 2, cellHeight / 2);
#+end_src

エフェクトと比べると、レンダリング方法を自由に実装できる点で自由度が高
いです (２つ重ねてレンダリングするなど、単純な変形だけでは実現できない
効果を実装できる)。ただし、他のアニメーションと組み合わせることはでき
なくなってしまうので、エフェクトとして同じ効果を実装することができない
か、一度は検討してみてください。

*** ポストエフェクトの追加

エフェクトが ~drawImage~ (~animation_~ 関数群) より前に呼ばれるのに対
し、 ポストエフェクトはそれよりも後に呼ばれます。これによって、レンダー
された画像の上からさらに効果を描き込むことができます。

~src/posteffects.js~ に一覧があります。

ポストエフェクトの実体は５引数の関数です：

- ~keyframe~
- ~ctx~
- ~cellWidth~
- ~cellHeight~

それぞれの引数の意味はエフェクトと同様です。最終的にレンダーされる絵文
字の４倍の大きさの canvas が渡ってくるところも同様です。

*** WebGL エフェクトの追加

Canvas の基本的な変形機能などだけでは実装できないエフェクトを WebGL で実装できます。

~src/webgleffects.js~ に一覧があります。

WebGL エフェクトの実体は４引数の関数です：

- ~keyframe~
- ~cellWidth~
- ~cellHeight~
- ~args~ ... そのままシェーダに渡してください

シェーダを関数として呼ぶと ~WebGLProgram~ が返ってくるので、 uniform 変数を適切にセットしてください。

#+begin_src js
  // 例
  import fooShader from '../shaders/foo.ts';
  function webglZoom (keyframe, _w, _h, args) {
    const program = fooShader(args);
    gl.uniform2f(gl.getUniformLocation(program, 'center'), keyframe, 0.5);
  }
#+end_src

画像は例によって４倍サイズでレンダーされます。

フラグメントシェーダ自体の追加が必要であれば、 ~src/shaders~ に追加します。

~webglEffectShader~ という色々いい感じにしてくれる関数があるので、これにシェーダーのコードを投げてください。

よく使う関数 (疑似乱数など) は ~src/shaders/utils~ にあります。

#+begin_src js
  const myShader = webglEffectShader(`
    <GLSL code>
  `);
#+end_src

*** フォントの追加

読み込みが遅くなるので慎重に。

以下のフォントは入れないようにしています：
- アイコンサイズに縮小すると読めない
- 収録漢字が少ない
- 他のフォントと使いたい場面が被る

1. フォントのライセンスをよく確認する

   再配布、改変 (woff 化) 可能か、など

2. スクリプトで woff を作る
   (https://github.com/zk-phi/woff2sfnt-sfnt2woff など)

   : node sfnt2woff.js hoge.ttf hoge.woff

3. fonts に woff を入れて、 ~dist/css/fonts.css~ から参照

4. LICENSE.markdown に追記
