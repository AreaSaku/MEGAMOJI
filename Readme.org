http://zk-phi.github.io/MEGAMOJI

** 開発者向け

新しいアイデアや新しいクソアニメを実装したらぜひ PR ください。

*** フィルタの追加

~filter_~ から始まる関数群は、「ファイルから選ぶ」で画像を読み込む際、
画像に対して行う前処理の実装です。

引数に ~img~ のオブジェクトが渡ってくるので、適宜処理をして、できあがっ
た画像の BlobURL を返してください。

*** エフェクトの追加

~effect_~ から始まる関数群は、「効果をつける」タブで選ぶことのできる特
殊効果たちの実装です。ユーザーは複数のエフェクトを組み合わせて使用する
ことができます。

以下の５引数を受けます:

- ~keyframe~ :: アニメーションの進行具合 (0.0 ~ 1.0 の浮動小数)
- ~ctx~ :: CanvasRenderingContext2D のオブジェクト
- ~cellWidth~ :: canvas の横幅
- ~cellHeight~ :: canvas の高さ
- ~background~ :: ユーザーの設定した背景色 (hex 表記)

~ctx~ に対して ~transform~, ~filter~, ~clip~ など好みの操作を行なって
ください。

渡ってくる ~canvas~ は、最終的に絵文字としてレンダーされるものの４倍
（縦横それぞれ２倍）の大きさになっていることに注意してください。

#+begin_src text
  +--------+
  |        | <- cellHeight / 4 の余白
  | +----+ |
  | |    | | <- cellHeight / 2
  | |    | |    最終的に絵文字に使われる部分
  | +----+ |
  |        | <- cellHeight / 4 の余白
  +--------+
#+end_src

たとえば絵文字を上にスライドアウトさせたい場合、 ~cellHeight / 2~ だけ
(~cellHeight~ ではなく) 上に ~translate~ してあげれば十分です

余白をトリミングする前の canvas の様子が見たい場合は、「整形方法を選ぶ」
の「その他」にある「余白を切らない」を有効にしてください。

----

仕様の背景：

~びよんびよん~ などの拡大縮小 (特に縮小) や回転を伴うエフェクトを組み
合わせると、本来絵文字として使われる範囲外の、余白部分までチラ見えして
しまうことがあります。このような場合でもアニメーションを綺麗に見せるた
め、内部ではいったん、最終的に絵文字に使われる範囲より外まではみ出して
レンダリングしてから、あとで余白をカットしています。

わかりづらい仕様なのでなんとかしたい気持ちはありますが、上手い方法が思
いついていないです。

*** アニメーションの追加

~animation_~ から始まる関数群は「効果をつける」タブ内「アニメーション」
で選ぶことができる特殊効果たちの実装です。ユーザーは一つしか同時に使え
ません。

以下の９引数を受けます:

- ~keyframe~ :: (~effect_~ と同様)
- ~ctx~ :: (~effect_~ と同様)
- ~image~ :: アニメーションさせたい元画像
- ~offsetH~ :: 元画像の描画したい範囲（左端）
- ~offsetV~ :: 元画像の描画したい範囲（上端）
- ~width~ :: 元画像の描画したい範囲 (幅)
- ~height~ :: 元画像の描画したい範囲 (高さ)
- ~cellWidth~ :: (~effect_~ と同様)
- ~cellHeight~ :: (~effect_~ と同様)

~effect_~ 関数群に比べて、元画像に関する引数が増えています。

~animation_~ 関数群は、渡ってきた canvas に対して、 ~ctx.drawImage~ な
どを使って実際に画像 ~image~ をレンダリングすることが期待されます。ユー
ザーの設定したトリミング範囲が ~offsetH, offsetV, width, height~ とし
て渡ってくるので、通常、 canvas に対するレンダリングは以下の形になりま
す (効果の一環としてあえてそうしないことは可能です)：

#+begin_src javascript
  ctx.drawImage(image, offsetH, offsetV, width, height, ...);
#+end_src

~animation_~ 関数群に渡される canvas も ~effect_~ と同様、実際に絵文字
として出力されるものの４倍の大きさを持っています。

#+begin_src text
  +--------+
  |        | <- cellHeight / 4 の余白
  | +----+ |
  | |    | | <- cellHeight / 2
  | |    | |    最終的に絵文字に使われる部分
  | +----+ |
  |        | <- cellHeight / 4 の余白
  +--------+
#+end_src

たとえば、ただ画面の中央に通常のサイズで絵文字を描画したいだけの場合
(なにもしないアニメーション)、実装は次のようになります：

#+begin_src javascript
  ctx.drawImage(..., cellWidth / 4, cellHeight / 4, cellWidth / 2, cellHeight / 2);
#+end_src

~effect_~ 関数群と比べると、レンダリング方法を自由に実装できる点で自由
度が高いです (２つ重ねてレンダリングするなど、単純な変形だけでは実現で
きない効果を実装できる)。ただし、他のアニメーションと組み合わせること
はできなくなってしまうので、 ~effect_~ として同じ効果を実装することが
できないか、一度は検討してみてください。

*** フォントの追加

読み込みが遅くなるので慎重に。

どれだけ面白くても、アイコンサイズに縮小して読めないようなフォントは入れない。

1. フォントのライセンスをよく確認する

2. スクリプトで woff を作る
   (https://github.com/odemiral/woff2sfnt-sfnt2woff など)

3. fonts に woff を入れて、 fonts.css から参照
